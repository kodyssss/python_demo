# 引入 NeuVector GitLab 插件
include:
  - 'scan.yml'

# 全局变量
variables:
  IMAGE_REGI_URL: "harbor.kodyrepo.online"
  IMAGE_REPO: "library"
  IMAGE_NAME: "suse-webui-demo"
  IMAGE_TAG: "$CI_COMMIT_TAG"
  DOCKER_AUTH_CONFIG: |
    {
      "auths": {
        "harbor.kodyrepo.online": {
          "auth": "YWRtaW46SGFyYm9yMTIzNDU="
        }
      }
    }
  NV_REGISTRY_USER: "admin"           # Harbor 用户名
  NV_REGISTRY_PASSWORD: "Harbor12345" # Harbor 密码

# 定义流水线阶段
stages:
  - build
  - scan
  - push
  - deploy

# 构建 Docker 镜像并输出tar包到本地
build_image:
  stage: build
  script:
    - echo "构建 Docker 镜像..."
    - docker build -t $IMAGE_REGI_URL/$IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG -f docker/dockerfile docker/
    # archive a running container to a tar file for scanning
    - docker save -o temp.tar $IMAGE_REGI_URL/$IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG
  artifacts:
    expire_in: 1 hour
    paths:
      - temp.tar
  rules:
    - if: '$CI_COMMIT_TAG'

# 对输出tar包到本地NeuVector 扫描，高危则输出报告、通过则下一步
neuvector_scan:
  stage: scan
  variables:
    scan_local_image: "true"
    image_tar: "temp.tar"
    image_registry_url: "https://harbor.kodyrepo.online"
    image_registry_user: "$NV_REGISTRY_USER"
    image_registry_password: "$NV_REGISTRY_PASSWORD"
    image_repo: "harbor.kodyrepo.online/$IMAGE_REPO/$IMAGE_NAME"
    image_tag: "$IMAGE_TAG"
    nv_registry_url: "harbor.kodyrepo.online"
    nv_scanner_image: "harbor.kodyrepo.online/library/neuvector-scanner:latest"    # 镜像标签
    nv_registry_user: "$NV_REGISTRY_USER"      # Harbor 用户名
    nv_registry_password: "$NV_REGISTRY_PASSWORD" # Harbor 密码
    scan_layers: "false"              # 是否扫描镜像层（关闭以加快速度）
    high_vul_to_fail: 9               # 高危漏洞阈值，超过 9 个失败
    medium_vul_to_fail: 10            # 中危漏洞阈值，超过 10 个失败
    vul_names_to_fail: "CVE-2020-1971, CVE-2020-1972" # 指定失败的 CVE
  dependencies:
    - build_image                    # 依赖构建阶段的 tar 文件
  rules:
    - if: '$CI_COMMIT_TAG'
  allow_failure: true  # 添加这一行，允许此作业失败

# 推送镜像到 Harbor
push_image:
  stage: push
  script:
    - echo "推送镜像到 Harbor..."
    - mkdir -p ~/.docker
    - echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json || { echo "写入 Docker 配置失败"; exit 1; }
    - ping -c 4 harbor.kodyrepo.online || { echo "无法连接 harbor.kodyrepo.online"; exit 1; }
    - docker push $IMAGE_REGI_URL/$IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG || { echo "推送 $IMAGE_TAG 失败"; exit 1; }
    - echo "镜像推送完成"
  dependencies:
    - neuvector_scan                 # 依赖扫描阶段
  rules:
    - if: '$CI_COMMIT_TAG'

# 更新 Fleet 部署配置（修改 kustomization.yaml）
update_fleet:
  stage: deploy
  script:
    - echo "更新 kustomization.yaml 中的镜像版本..."
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "GitLab CI"
    - cd kustomize/base
    - |
      cat <<EOF > kustomization.yaml
      apiVersion: kustomize.config.k8s.io/v1beta1
      kind: Kustomization
      resources:
      - deployment.yaml
      - service.yaml
      - ingress.yaml
      images:
      - name: harbor.kodyrepo.online/library/suse-webui-demo
        newTag: $CI_COMMIT_TAG  # 动态更新为 CI_COMMIT_TAG
      EOF
    - git add kustomization.yaml
    - git commit -m "Update kustomization.yaml to $CI_COMMIT_TAG" || echo "No changes to commit"
    - git push https://$GITLAB_USER:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_DEFAULT_BRANCH || { echo "Git push 失败"; exit 1; }
    - echo "Fleet 配置更新完成"
  dependencies:
    - push_image
  rules:
    - if: '$CI_COMMIT_TAG'
