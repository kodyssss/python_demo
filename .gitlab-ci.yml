# 全局变量
variables:
  IMAGE_NAME: "harbor.kodyrepo.online/library/flask-demo" # 自定义镜像名称 
  IMAGE_TAG: "$CI_COMMIT_TAG" # 使用提交的短 SHA 作为标签
  DOCKER_AUTH_CONFIG: | # Docker 认证配置，用于登录 Harbor
    {
      "auths": {
        "harbor.kodyrepo.online": {
          "auth": "YWRtaW46SGFyYm9yMTIzNDU="
        }
      }
    }

# 定义流水线阶段
stages:
  - build
  - push

# 构建 Docker 镜像
build_image:
  stage: build
  image: docker:20.10 # 使用指定版本的 Docker 镜像 
  script:
    - echo "构建 Docker 镜像..."
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -f docker/dockerfile docker/
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
  rules:
    - if: '$CI_COMMIT_TAG' # 只在推送标签时触发

# 推送镜像到 Harbor
push_image:
  stage: push
  image: docker:20.10
  script:
    - echo "推送镜像到 Harbor..."
    - mkdir -p ~/.docker
    - echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json || { echo "写入 Docker 配置失败"; exit 1; }
    - ping -c 4 harbor.kodyrepo.online || { echo "无法连接 k8s.kodyrepo.online"; exit 1; }
    - docker push $IMAGE_NAME:$IMAGE_TAG || { echo "推送 $IMAGE_TAG 失败"; exit 1; }
    - docker push $IMAGE_NAME:latest || { echo "推送 latest 失败"; exit 1; }
    - echo "镜像推送完成"
  dependencies:
    - build_image # 依赖构建阶段
  rules:
    - if: '$CI_COMMIT_TAG' # 只在推送标签时触发